version: "3.8"

services:
  front:
    container_name: am_ai_assistant_front
    build:
      context: .
      dockerfile: assistant-front/Dockerfile
    ports:
      - "${FRONT_PORT}:${FRONT_PORT}"
    depends_on:
      - postgres
      - chromadb
  am_rag:
    container_name: am_ai_assistant_rag_core
    build:
      context: .
      dockerfile: assistant-api-core/Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      - postgres
      - chromadb
  strapi:
    container_name: strapi_cms
    build:
      context: ./strapi-cms
      dockerfile: Dockerfile
    env_file:
      - ./strapi-cms/.env 
    environment:
      NODE_ENV: development
    ports:
      - "1337:1337"
    depends_on:
      - strapi_db

  postgres:
    container_name: am_ai_assistant_postgres
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  chromadb:
    container_name: am_ai_assistant_chromadb
    image: ghcr.io/chroma-core/chroma:latest
    restart: unless-stopped
    ports:
      - "${CHROMADB_PORT}:${CHROMADB_PORT}"
    environment:
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_SERVER_ENABLE_GRPC=false
      - CHROMA_SERVER_HTTP_PORT=8000
  strapi_db:
    container_name: strapi_database
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${STRAPI_POSTGRES_USER}
      POSTGRES_PASSWORD: ${STRAPI_POSTGRES_PASSWORD}
      POSTGRES_DB: ${STRAPI_POSTGRES_DB}
    ports:
      - "${STRAPI_DB_PORT}:5432"
    volumes:
      - pgdata_strapi:/var/lib/postgresql/data

volumes:
  pgdata:
  pgdata_strapi:
